name: TA-Lib Installation Matrix Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.12']
        install-method: [conda, make, msi, wheel]
        exclude:
          # Linux 不使用 msi 和 wheel 方式
          - os: ubuntu-latest
            install-method: msi
          - os: ubuntu-latest
            install-method: wheel
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v2
    
    ###########################################
    # 环境设置与 TA-Lib 安装 (按安装方法分组)
    ###########################################

    # Conda
    - name: Set up Conda environment
      if: matrix.install-method == 'conda'
      uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        channels: conda-forge,defaults
        channel-priority: strict
        activate-environment: test
        auto-activate-base: false

    ## 方法 1: Conda 安装 TA-Lib (Linux/Windows)    
    - name: Install TA-Lib (Conda)
      if: matrix.install-method == 'conda'
      shell: bash -l {0}
      run: |
        conda install -y -c conda-forge ta-lib
        pip install numpy vnpy==3.9.4 pytest vnpy_ctp

    # 非Conda
    - name: Set up Python (非Conda)
      if: matrix.install-method != 'conda'
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install base Python packages
      if: matrix.install-method != 'conda'
      run: |
        python -m pip install wheel numpy -U
    
    ## 方法 2: Linux Make 编译安装 TA-Lib    
    - name: Install TA-Lib (Linux Make)
      if: runner.os == 'Linux' && matrix.install-method == 'make'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential wget
        sudo locale-gen zh_CN.GB18030
        cd /tmp
        wget https://github.com/ta-lib/ta-lib/releases/download/v0.6.4/ta-lib-0.6.4-src.tar.gz
        tar -xzf ta-lib-0.6.4-src.tar.gz
        cd ta-lib-0.6.4/
        ./configure --prefix=/usr
        make
        sudo make install
        pip install ta-lib

    ## 方法 3: Windows NMake 编译安装 TA-Lib
    - name: Install TA-Lib (Windows NMake)
      if: runner.os == 'Windows' && matrix.install-method == 'make'
      env:
        LIB: c:\ta-lib\c\lib
        INCLUDE: c:\ta-lib\c\include
      run: |
        curl -L -o ta-lib-msvc.zip https://github.com/TA-Lib/ta-lib/releases/download/v0.4.0/ta-lib-0.4.0-msvc.zip
        7z x ta-lib-msvc.zip -oc:\
        cd c:\ta-lib\c\make\cdr\win32\msvc
        cmd /c "`"C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat`" && nmake"
        copy c:\ta-lib\c\lib\ta_libc_cdr.lib c:\ta-lib\c\lib\ta_lib.lib
        pip install ta-lib==0.5.3

    ## 方法 4: Windows MSI 安装 TA-Lib
    - name: Install TA-Lib (Windows MSI)
      if: runner.os == 'Windows' && matrix.install-method == 'msi'
      run: |
        curl -L -o ta-lib-msvc.msi https://github.com/ta-lib/ta-lib/releases/download/v0.6.4/ta-lib-0.6.4-windows-x86_${{ runner.arch == 'X64' && '64' || '32' }}.msi
        msiexec /i ta-lib-msvc.msi /quiet /qn
        pip install ta-lib

    ## 方法 5: Windows Wheel 安装 TA-Lib
    - name: Install TA-Lib (Windows Wheel)
      if: runner.os == 'Windows' && matrix.install-method == 'wheel'
      run: |
        $wheelFile = "ta_lib-0.6.3-cp312-cp312-win_$($env:RUNNER_ARCH -eq 'X64' ? 'amd64' : 'arm64').whl"
        curl -L -o $wheelFile https://github.com/cgohlke/talib-build/releases/download/v0.6.3/$wheelFile
        pip install ./$wheelFile

    # 非Conda
    - name: Install VeighNa packages
      if: matrix.install-method != 'conda'
      run: |
        pip install vnpy==3.9.4 pytest vnpy_ctp
    
    ###########################################
    # 测试执行
    ###########################################
        
    # 运行测试 (Conda)
    - name: Run tests (Conda) - Windows
      if: matrix.install-method == 'conda' && runner.os == 'Windows'
      shell: bash -l {0}
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_md_ctp.py -v

    - name: Run tests (Conda) - Linux
      if: matrix.install-method == 'conda' && runner.os == 'Linux'
      shell: bash -l {0}
      env:
        PYTHONPATH: ${{ github.workspace }}
        LC_ALL: zh_CN.GB18030
        LANG: zh_CN.GB18030
      run: |
        # 安装并设置locale
        sudo apt-get update
        sudo apt-get install -y locales
        sudo locale-gen zh_CN.GB18030
        # 运行测试
        pytest tests/test_md_ctp.py -v
        
    # 运行测试 (非Conda)
    - name: Run tests (Non-Conda)
      if: matrix.install-method != 'conda'
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/test_md_ctp.py -v 